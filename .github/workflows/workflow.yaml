name: Fastify Backend CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: wage-backend-ecr
  WORKING_DIRECTORY: apps/api
  ECS_CONTAINER_NAME: wage-backend-api
  ENV_NAME: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main' && 'prd') || 'dev' }}

permissions:
  id-token: write 
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::910599465842:role/github-actions-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('apps/api/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (fail only on critical vulnerabilities)
        run: npm audit --audit-level=critical

      - name: Run ESLint
        run: npm run lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Image Tags
        id: tags
        run: |
          echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ${{ env.WORKING_DIRECTORY }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.run_id }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.timestamp }}-${{ steps.tags.outputs.sha_short }}
            ${{ env.ENV_NAME == 'prd' && format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, env.ECR_REPOSITORY, 'latest') || '' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init and Apply
        working-directory: infrastructure
        run: |
          terraform init
          terraform apply -var-file=environments/${{ env.ENV_NAME }}.tfvars -auto-approve

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition wage-backend-task-family-${{ env.ENV_NAME }} \
            --query taskDefinition > ./task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.WORKING_DIRECTORY }}/task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.tags.outputs.timestamp }}-${{ steps.tags.outputs.sha_short }}

      #TODO: Ensure that if task health check fails, DO NOT DEPLOY
      - name: Deploy to Amazon ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: wage-backend-service-${{ env.ENV_NAME }}
          cluster: wage-backend-cluster-${{ env.ENV_NAME }}
          wait-for-service-stability: true
          wait-for-minutes: 10
