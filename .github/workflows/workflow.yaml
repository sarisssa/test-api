name: Fastify Backend CI/CD

on:
  workflow_dispatch:  
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-1 
  ECR_REPOSITORY: wage-backend-api-prd 
  ECS_CLUSTER_NAME: wage-backend-cluster-prd 
  ECS_TASK_DEFINITION_FAMILY: wage-backend-task-family-prd
  ECS_SERVICE_NAME: wage-backend-service-prd
  ECS_CONTAINER_NAME: wage-backend-api
  WORKING_DIRECTORY: apps/test-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 

    permissions:
      id-token: write 
      contents: read  

    env:
      isMain: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v4
        id: npm-cache 
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }} 
          key: ${{ runner.os }}-npm-${{ hashFiles('apps/test-api/package-lock.json') }}
     
      - name: Install dependencies
        run: npm ci 
      
      - name: Run ESLint
        run: npm run lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: ${{ env.isMain }} 
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.run_id }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.isMain && format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, env.ECR_REPOSITORY, 'latest') || '' }}

      # Run terraform apply for dev/prd depending on PR or main (dont forget the yes flag)

      # For Merge to PR, deploy to ECS dev environment

      - name: Download Task Definition
        if: env.isMain == 'true'
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition > ./task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: env.isMain == 'true'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.WORKING_DIRECTORY }}/task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to Amazon ECS
        if: env.isMain == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
 
